/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

plugins {
  // id "com.enonic.xp.app" version "2.0.0"
  id "com.moowork.node" version "1.3.1"
}

allprojects {
  repositories {
    mavenLocal()
    jcenter()
  }
}

/*app {
  systemVersion = "${xpVersion}"
}*/

def ignoreSubprojectDirs = [
        'packages'
]
configure(subprojects.findAll {!ignoreSubprojectDirs.contains(it.name)}) {
  apply plugin: "com.moowork.node" // version "1.3.1"


  task cleanNpm(type: Delete) {
    delete 'node_modules'
  }


  def slash = File.separator
  project.ext.PROJDIR = "${project.buildDir.toString()}${slash}${slash}${slash}".replace("${slash}build${slash}${slash}", '')

  def markerName = "${project.ext.PROJDIR}node_modules${slash}react4xp${slash}npmInstalled.marker"
  def linkMarkerName = "${project.ext.PROJDIR}node_modules${slash}react4xp${slash}npmLinked.marker"

  task nsiInstall(type:NpmTask) {
    args=['run', 'nsi:install']
    doLast {
      def marker = new File(linkMarkerName)
      new File(marker.getParent()).mkdirs()
      marker.text = """
Marker file, indicating that node_module is locally linked - faster than traversing the entire node_modules tree for changes.
"""
      println "Created: $linkMarkerName"
    }
  }
  nsiInstall.inputs.files('package.json', 'package-lock.json')
  nsiInstall.outputs.file('package-lock.json')
  nsiInstall.outputs.file file(linkMarkerName)

  if (new File(linkMarkerName).exists()) {
    println "$linkMarkerName found!"
    npmInstall.enabled = false
    npmInstall.dependsOn nsiInstall

  } else {
    println "$linkMarkerName not found."
    npmInstall.enabled = true
    npmInstall.inputs.files('package.json', 'package-lock.json')
    npmInstall.outputs.file('package-lock.json')
    npmInstall.outputs.file file(markerName)
    npmInstall.doLast {
      def marker = new File(markerName)
      new File(marker.getParent()).mkdirs()
      marker.text = """
Marker file, indicating that the npmInstall gradle task has been run in this subproject - faster than traversing the entire node_modules tree for changes.
"""
    }
  }


  task cleanBuilt(type: Delete) {}
  task npmClean(type: Delete) {
    delete 'node_modules'
  }

  task compileJS(type: NpmTask) {}
  compileJS.inputs.file('package.json')
  compileJS.inputs.dir('src')
  compileJS.dependsOn ":packages:${project.name}:npmInstall"


  task build {}
  build.dependsOn ":packages:${project.name}:compileJS"

  task lint(type: NpmTask) {
    args=['run', 'lint']
  }
  lint.inputs.file('package.json')
  lint.inputs.dir('src')
  lint.outputs.dir('src')
  lint.dependsOn ":packages:${project.name}:npmInstall"
  build.shouldRunAfter ":packages:${project.name}:lint"



  task doPublish(type: NpmTask) {
    args=['publish']
  }
  doPublish.enabled = false
  if (project.hasProperty("lvl")) {
    if (project.name == "regions" || project.name == "constants") {
      if (project.property("lvl") == "1") {
        doPublish.enabled = true
      }
    } else if (project.name == "react4xp") {
      if (project.property("lvl") == "3") {
        doPublish.enabled = true
      }
    } else {
      if (project.property("lvl") == "2") {
        doPublish.enabled = true
      }
    }
  }

  task npmLink(type: NpmTask) {
    args=['link']
    doLast {
      def marker = new File(linkMarkerName)
      new File(marker.getParent()).mkdirs()
      marker.text = """
Marker file, indicating that node_module is locally linked - faster than traversing the entire node_modules tree for changes.
"""
      println "Created: $linkMarkerName"
    }
  }
  npmLink.dependsOn lint


  task test(type: NpmTask) {}
  test.inputs.files('package.json')
  test.inputs.dir('src')
  test.inputs.dir('test')
  test.dependsOn ":packages:${project.name}:npmClean"
  test.dependsOn ":packages:${project.name}:npmInstall"
  test.dependsOn ":packages:${project.name}:lint"
  test.dependsOn ":packages:${project.name}:npmLink"
  test.dependsOn build
  npmInstall.shouldRunAfter npmClean
  lint.shouldRunAfter npmInstall
  npmLink.shouldRunAfter lint
  build.shouldRunAfter npmLink
}

/*dependencies {
  include project(":packages:constants")
  include project(":packages:buildcomponents")
}*/

def slash = File.separator
def markerName = ".${slash}node_modules${slash}react4xp${slash}npmInstalled.txt"
npmInstall.inputs.files('package.json', 'package-lock.json')
npmInstall.outputs.file('package-lock.json')
npmInstall.outputs.file file(markerName)
npmInstall.doLast {
  def marker = new File(markerName)
  new File(marker.getParent()).mkdirs()
  marker.text = """
Marker file, indicating that the npmInstall gradle task has been run in the root project - faster than traversing the entire node_modules tree for changes.
"""
}
