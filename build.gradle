/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

plugins {
  id "com.enonic.xp.app" version "2.0.0"
  id "com.moowork.node" version "1.3.1"
}

allprojects {
  repositories {
    mavenLocal()
    jcenter()
  }
}

app {
  systemVersion = "${xpVersion}"
}

def ignoreSubprojectDirs = [
        'packages'
]
configure(subprojects.findAll {!ignoreSubprojectDirs.contains(it.name)}) {
  apply plugin: "com.moowork.node" // version "1.3.1"


  task cleanNpm(type: Delete) {
    delete 'node_modules'
  }


  def slash = File.separator
  project.ext.PROJDIR = "${project.buildDir.toString()}${slash}${slash}${slash}".replace("${slash}build${slash}${slash}", '')

  def markerName = "${project.ext.PROJDIR}${slash}node_modules${slash}react4xp${slash}npmInstalled.txt"
  def linkMarkerName = "${project.ext.PROJDIR}${slash}node_modules${slash}react4xp${slash}npmLinked.txt"

  task nsiInstall(type:NpmTask) {
    args=['run', 'nsi:install']
    doLast {
      def marker = new File(linkMarkerName)
      new File(marker.getParent()).mkdirs()
      marker.text = """
Marker file, indicating that node_module is locally linked - faster than traversing the entire node_modules tree for changes.
"""
    }
  }
  nsiInstall.inputs.files('package.json', 'package-lock.json')
  nsiInstall.outputs.file('package-lock.json')
  nsiInstall.outputs.file file(linkMarkerName)

  if (new File(linkMarkerName).exists()) {
    npmInstall.enabled = false
    npmInstall.dependsOn nsiInstall

  } else {
    npmInstall.enabled = true
    npmInstall.inputs.files('package.json', 'package-lock.json')
    npmInstall.outputs.file('package-lock.json')
    npmInstall.outputs.file file(markerName)
    npmInstall.doLast {
      def marker = new File(markerName)
      new File(marker.getParent()).mkdirs()
      marker.text = """
Marker file, indicating that the npmInstall gradle task has been run in this subproject - faster than traversing the entire node_modules tree for changes.
"""
    }
  }


  task cleanBuilt(type: Delete) {}
  task npmClean(type: Delete) {
    delete 'node_modules'
  }

  task compileJS(type: NpmTask) {}
  compileJS.inputs.file('package.json')
  compileJS.inputs.dir('src')
  compileJS.dependsOn ":packages:${project.name}:npmInstall"

  task buildAll {}
  buildAll.dependsOn ":packages:${project.name}:compileJS"

  task lint(type: NpmTask) {
    args=['run', 'lint']
  }
  lint.inputs.file('package.json')
  lint.inputs.dir('src')
  lint.outputs.dir('src')
  lint.dependsOn ":packages:${project.name}:npmInstall"
  buildAll.shouldRunAfter ":packages:${project.name}:lint"



  task doPublish(type: NpmTask) {
    args=['publish']
  }

  // doPublish.dependsOn ":packages:${project.name}:buildAll" // <-- IMPORTANT: npm link messes up the sequence. Always run "gradlew buildAll" (or something that runs it, e.g. "npm run version") before gradlew doPublish!!! TODO: doPublish should check and warn about this.

  task postPublish {}
  postPublish.dependsOn ":packages:${project.name}:cleanBuilt"
  cleanBuilt.shouldRunAfter ":packages:${project.name}:doPublish"
  postPublish.dependsOn ":packages:${project.name}:doPublish"
  task publish {}
  publish.dependsOn ":packages:${project.name}:postPublish"


  task npmLink(type: NpmTask) {
    args=['link']
    doLast {
      def marker = new File(linkMarkerName)
      new File(marker.getParent()).mkdirs()
      marker.text = """
Marker file, indicating that node_module is locally linked - faster than traversing the entire node_modules tree for changes.
"""
    }
  }
  npmLink.dependsOn lint


  task testAll(type: NpmTask) {}
  testAll.inputs.files('package.json')
  testAll.inputs.dir('src')
  testAll.inputs.dir('test')
  testAll.dependsOn ":packages:${project.name}:npmClean"
  testAll.dependsOn ":packages:${project.name}:npmInstall"
  testAll.dependsOn ":packages:${project.name}:lint"
  testAll.dependsOn ":packages:${project.name}:npmLink"
  testAll.dependsOn buildAll
  npmInstall.shouldRunAfter npmClean
  lint.shouldRunAfter npmInstall
  npmLink.shouldRunAfter lint
  buildAll.shouldRunAfter npmLink
}

dependencies {
  include project(":packages:constants")
  include project(":packages:buildcomponents")
}

def slash = File.separator
def markerName = ".${slash}node_modules${slash}react4xp${slash}npmInstalled.txt"
npmInstall.inputs.files('package.json', 'package-lock.json')
npmInstall.outputs.file('package-lock.json')
npmInstall.outputs.file file(markerName)
npmInstall.doLast {
  def marker = new File(markerName)
  new File(marker.getParent()).mkdirs()
  marker.text = """
Marker file, indicating that the npmInstall gradle task has been run in the root project - faster than traversing the entire node_modules tree for changes.
"""
}
